#!/usr/bin/env python

import os
import sys
import signal
import asyncio
import aiofiles  # type: ignore
from html import escape
from mpd.asyncio import MPDClient, CommandError  # type: ignore
from typing import Optional
from typing_extensions import TypedDict

CACHEFILE = os.path.join(os.getenv("HOME"), ".cache", "mpdnotdaem")
ARTFILE = os.path.join(os.getenv("HOME"), ".cache", "mpdnotdaem-art")


class Song(TypedDict):
    file: str
    cover: str
    title: str
    artist: str
    album: str
    lyrics: str


def get_proc_path(proc_pid: str) -> str:
    """Get the full path for the cmdline file of proc_pid in /proc."""
    return os.path.join("/proc", proc_pid, "cmdline")


async def get_i3blocks_pid() -> int:
    while True:
        try:
            pid = await scan_procs_for_i3blocks_pid()
            if pid:
                return pid
        except asyncio.CancelledError:
            print("i3blocks process not found.", file=sys.stderr)
            sys.exit(1)


async def scan_procs_for_i3blocks_pid() -> Optional[int]:
    for dirname in os.listdir("/proc")[::-1]:
        if await proc_is_i3blocks(get_proc_path(dirname)):
            return int(dirname)

    else:
        return None


async def proc_is_i3blocks(path: str) -> bool:
    try:
        async with aiofiles.open(path, mode="rb") as f:
            assert await f.read() == b"i3blocks\x00"
            return True
    except (FileNotFoundError, NotADirectoryError, AssertionError, ProcessLookupError):
        return False


def song_to_notification_args(song: Song) -> tuple:
    """Turn song into a tuple that can be used as args to notify-send."""
    return (
        song["title"],
        "{artist}<br/><i>{album}</i><br/><br/>".format(**song),
    )


async def run_dunstify(args: list):
    proc = await asyncio.create_subprocess_exec(
        "dunstify",
        "-h",
        "string:category:desktop.mpd",
        "-r",
        "999",
        *args,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    await proc.communicate()


async def notify_song(mpc: MPDClient, song: Song):
    """Create notification with information contained in SONG."""
    if not song:
        return

    album_art = await get_album_art(mpc, song)
    args = []
    if album_art:
        await write_album_art(album_art)
        args += ["-i", ARTFILE]

    args += ["--", *song_to_notification_args(song)]
    await run_dunstify(args)


async def write_album_art(album_art: bytes):
    """Write album art from song to ARTFILE. Return True if succesful."""
    async with aiofiles.open(ARTFILE, mode="wb") as f:
        await f.write(album_art)
        return True


async def get_album_art(mpc: MPDClient, song: Song) -> Optional[bytes]:
    try:
        pic = await mpc.readpicture(song["file"])
        return pic["binary"]
    except CommandError:
        return None


async def write_file_info(song: Song):
    try:
        artist = escape(song["artist"])
        title = escape(song["title"])
        content = f"{artist} - {title}\n"
        async with aiofiles.open(CACHEFILE, mode="w") as f:
            await f.write(content)
    except KeyError:
        async with aiofiles.open(CACHEFILE, mode="w") as f:
            await f.write("Silence...\n")


async def signal_i3blocks(pid: int):
    """Signal i3blocks to update the status line."""
    if not await proc_is_i3blocks(get_proc_path(str(pid))):
        pid = await asyncio.wait_for(get_i3blocks_pid(), timeout=2)

    os.kill(pid, signal.SIGRTMIN + 10)


async def update_i3blocks(song: Song, i3blocks_pid: int):
    await write_file_info(song)
    await signal_i3blocks(i3blocks_pid)


async def mpd_idle_loop(mpc: MPDClient, current_song: Song, i3blocks_pid: int):
    async for sub in mpc.idle("player"):
        new_song = await mpc.currentsong()
        if new_song != current_song:
            current_song = new_song
            await asyncio.gather(
                update_i3blocks(current_song, i3blocks_pid),
                notify_song(mpc, current_song),
            )


async def start_client():
    mpc = MPDClient()
    await mpc.connect("localhost", port=6600)
    current_song = await mpc.currentsong()
    i3blocks_pid = await asyncio.wait_for(get_i3blocks_pid(), timeout=2)
    await update_i3blocks(current_song, i3blocks_pid)
    await mpd_idle_loop(mpc, current_song, i3blocks_pid)


def sigterm_handler(*args):
    raise KeyboardInterrupt


if __name__ == "__main__":
    try:
        signal.signal(signal.SIGTERM, sigterm_handler)
        asyncio.run(start_client())
    except KeyboardInterrupt:
        print("Goodbye.")
    sys.exit(0)
