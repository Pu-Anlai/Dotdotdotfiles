;; %-LOCATION:$HOME/.config/emacs/subinits/init-mu4e.el-% %-CUSTOM:$HOME/.config/mu4e-contexts-% -*-emacs-lisp-*-
;; DO EDITS HERE: $HOME/.local/share/skel/mu4e.skel
;; -*- lexical-binding: t -*-
;; set mu4e as emacs default mail program
(setq mail-user-agent #'mu4e-user-agent)

;; smtp
(use-package smtpmail
  :straight nil
  :after mu4e
  :config
  (setq message-send-mail-function 'smtpmail-send-it))

;; I'm using this in my mu4e config
(use-package s
  :commands s-match)

(use-package mu4e
  :straight nil
  :general
  (:keymaps         'override
   "<f2>"           'mu4e
   "S-<f2>"         (general-l (°split-window-and-do (mu4e))))
  :config
  (evil-collection-mu4e-setup)
  (require 'subr-x)
  (require 'xdg)
  ;; setup keybindings here, so they are not overwritten by evil-collection
  (general-def
    :states         'normal
    :keymaps        'mu4e-headers-mode-map
    "x"             (general-l (mu4e-mark-execute-all t))
    "q"             '°mu4e-headers-quit-view-or-headers
    "t"             '°mu4e-headers-mark-toggle
    "p"             '°mu4e-search-sender)
  (general-def
    :states         'normal
    :keymaps        'mu4e-view-mode-map
    "x"             (general-l (mu4e-mark-execute-all t)))
  (general-leader
    :states         'normal
    :keymaps        'mu4e-headers-mode-map
    "t"             '°mu4e-headers-mark-pattern
    "m"             (general-l (°mu4e-headers-handle-deferred 'move))
    "d"             (general-l (°mu4e-headers-handle-deferred 'trash)))
  (general-leader
    :states         'normal
    :keymaps        'mu4e-compose-mode-map
    "!"             'message-send-and-exit
    "K"             'mu4e-message-kill-buffer
    "d"             (general-l
                      (°ispell-cycle-dicts)
                      (flyspell-buffer))
    "D"             (general-l
                      (call-interactively #'ispell-change-dictionary)
                      (flyspell-buffer))
    "a"             'mail-add-attachment)

  (setq mu4e-context-policy nil)
  (setq mu4e-compose-context-policy nil)
  (defvar °°mu4e-account-list nil
    "List of contexts that have seen modifications.  This will be passed to \"mbsync\" on exiting Emacs.")

  ;; set up private context
  (setq mu4e-contexts
        `(,(make-mu4e-context
            :name "posteo"
            :match-func (lambda (msg) (°mu4e-match-maildir msg "posteo"))
            :vars '((user-mail-address . "{{{MAIL_ADDRESS}}}")
                    (user-full-name . "{{{REAL_NAME}}}")
                    (mu4e-sent-folder . "/posteo/Sent")
                    (mu4e-drafts-folder . "/posteo/Drafts")
                    (mu4e-trash-folder . "/posteo/Trash")
                    (mu4e-refile-folder . "/posteo/Archiv")
                    (mu4e-get-mail-command . "mbsync posteo")
                    (smtpmail-mail-address . "{{{MAIL_ADDRESS}}}")
                    (smtpmail-stream-type . ssl)
                    (smtpmail-smtp-server . "posteo.de")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-queue-dir . "~/.local/share/mail/queued_mail/cur")
                    (mu4e-maildir-shortcuts . (("/posteo/Archiv"            . ?a)
                                               ("/posteo/Drafts"            . ?d)
                                               ("/posteo/Inbox"             . ?i)
                                               ("/posteo/Sent"              . ?s)
                                               ("/posteo/Transaktionen"     . ?t)))))
          ;; room for additional contexts
          {{{custom}}}
          ))

  ;; add context to °°mu4e-account-list after each modification to the database
  ;; (if they're not already there)
  (dolist (cmd '(add move sent))
    (advice-add (°concat-symbols 'mu4e--server- cmd)
                :after #'°°mu4e-push-to-account-list))

  ;; remove from list if the context is updated
  (advice-add #'mu4e-update-mail-and-index :after #'°°mu4e-remove-from-account-list)

  ;; sync on emacs exit
  (add-to-list 'kill-emacs-query-functions
               (defun °°mu4e-final-mail-sync ()
                 "Sync all mail accounts that we have switched to during this session."
                 (if °°mu4e-account-list
                     (progn
                       (message
                        (concat "Syncing mail accounts ("
                                (string-join °°mu4e-account-list ", ")
                                ")..."))
                       (let* ((cmd (string-join (cons "mbsync" °°mu4e-account-list) " "))
                              (result (call-process-shell-command cmd)))
                         
                         (mu4e-update-index)
                         (not
                          (unless (eql result 0)
                            (display-warning 'mbsync "Error syncing mail accounts" :error)))))
                   t)))

  ;; context on startup
  (mu4e-context-switch nil "posteo")

  ;; switch context before moving messages so as to make use of the individual maildir-shortcuts
  (dolist (mode '(view headers))
    (advice-add (°concat-symbols 'mu4e- mode '-mark-for-move)
                :before #'°mu4e-context-switch-at-point))

  ;; mark messages as read when moving them
  (advice-add #'mu4e--server-move :after #'°°mu4e-mark-read-on-move)

  ;; headers view
  (setq mu4e-use-fancy-chars t
        mu4e-headers-include-related nil
        mu4e-headers-advance-after-mark nil
        mu4e-headers-leave-behavior 'apply
        mu4e-headers-fields '((:human-date . 12)
                              (:flags . 6)
                              (:from-or-to . 22)
                              (:subject)))

  ;; message view
  (setq mu4e-confirm-quit nil
        mu4e-view-scroll-to-next t
        mu4e-change-filenames-when-moving t
        mu4e-view-show-images t
        mu4e-attachment-dir (xdg-user-dir "DOWNLOAD")
        mu4e-save-multiple-attachments-without-asking t)
  (with-eval-after-load "mm-decode"
    (add-to-list 'mm-discouraged-alternatives "text/richtext")
    (add-to-list 'mm-discouraged-alternatives "text/html"))
  (when (image-type-available-p 'imagemagick)
    (imagemagick-register-types))
  (add-to-list 'mu4e-view-actions
               '("bopen in browser" . mu4e-action-view-in-browser))

  ;; don't show cursor in emacs state when in message or headers view
  (defun °°emacs-state-hide-cursor ()
    (add-hook 'evil-emacs-state-entry-hook
              (lambda () (internal-show-cursor nil nil))
              nil t)
    (add-hook 'evil-emacs-state-exit-hook
              (lambda () (internal-show-cursor nil t))
              nil t))
  (dolist (mode '(headers view))
    (add-hook (°concat-symbols 'mu4e- mode '-mode-hook)
              #'°°emacs-state-hide-cursor))
  (dolist (mode '(main compose))
    (add-hook (°concat-symbols 'mu4e- mode '-mode-hook)
              (lambda () (internal-show-cursor nil t))))

  ;; compose view
  (setq mu4e-compose-complete-only-personal t
        mu4e-compose-signature-auto-include nil
        mu4e-compose-dont-reply-to-self t
        mu4e-compose-format-flowed t
        fill-flowed-encode-column 72
        mu4e-compose-cite-function #'message-cite-original
        message-citation-line-function #'message-insert-formatted-citation-line
        message-citation-line-format "\nAm %A, den %x um %X schrieb %f:"
        message-kill-buffer-on-exit t)
  (defun °mu4e-compose-change-plaintext-dictionary ()
    (setq-local ispell-alternate-dictionary
                (°join-path nil "/" "usr" "share" "dict"
                            (pcase (or ispell-local-dictionary ispell-dictionary)
                              ("de_DE" "german")
                              ("en_AU" "british-english")
                              (- "words")))))
  ;; initial setup for mu4e-compose-mode
  (add-hook 'mu4e-compose-mode-hook
            (defun °mu4e-compose-setup ()
              (visual-line-mode)
              ;; decide which dict to use based on the extension of the parent
              ;; message's email adress, use de_DE if there is no parent message
              (let*
                  ((sender1 (cdr (car
                                  (ignore-errors
                                    (mu4e-message-field mu4e-compose-parent-message :from)))))
                   (ext (or (car (ignore-errors (s-match "\.[^\.]+?$" sender1)))
                            ".de")))
                (setq ispell-local-dictionary (if (string= ext ".de")
                                                  "de_DE"
                                                "en_AU"))
                (flyspell-mode)
                (message "Ispell Dictionary set to %s." ispell-local-dictionary))
              ;; choose plaintext dictionary based on selected ispell dict
              (°mu4e-compose-change-plaintext-dictionary)
              ;; also change plaintext dictionary every time ispell dictionary
              ;; is changed
              (add-hook 'ispell-change-dictionary-hook #'°mu4e-compose-change-plaintext-dictionary)
              
              ;; setup company-mode for word autocompletion
              (company-mode)
              (setq-local company-backends '(company-capf company-ispell))
              (setq-local company-minimum-prefix-length 6)))

  (defun °mu4e-context-switch-at-point ()
    "Use the message at point for determining what context to switch to."
    (mu4e-context-switch nil
                         (mu4e-context-name
                          (mu4e-context-determine (mu4e-message-at-point))))) 

  (defun °mu4e-headers-quit-view-or-headers ()
    (interactive)
    (let ((view-win (get-buffer-window
                     (or (mu4e-get-view-buffer) "") ; make sure to not default to current buffer
                     'visible)))
      (if view-win
          (progn
            (select-window view-win)
            (mu4e-view-quit))
        (mu4e~headers-quit-buffer))))

  (defun °mu4e-headers-handle-deferred (action)
    (cl-letf (((symbol-function #'mu4e-read-option)
               (lambda (&rest args) '(action))))
      (mu4e-mark-resolve-deferred-marks)))

  (defun °mu4e-headers-mark-toggle ()
    (interactive)
    (if (mu4e-mark-docid-marked-p mu4e~highlighted-docid)
        (mu4e-headers-mark-and-next 'unmark)
      (mu4e-headers-mark-and-next 'something)))

  (defun °mu4e-headers-mark-pattern ()
    (interactive)
    (cl-letf (((symbol-function #'mu4e--mark-get-markpair)
               (lambda (&rest args) '(something))))
      (mu4e-headers-mark-pattern)))

  (defun °°mu4e-mark-read-on-move (docid-or-msgid &optional maildir &rest r)
    (when maildir
      (funcall
       (plist-get (cdr (assq 'read mu4e-marks)) :action)
       docid-or-msgid nil nil)))
  
  (defun °mu4e-match-maildir (msg maildir)
    (when msg
      (let*
          ((path-sep (substring (file-name-as-directory "x") -1))
           (first-part "")
           (maildir-path (mu4e-message-field msg :maildir))
           (path-list (split-string maildir-path path-sep)))
        (while (equal first-part "")
          (message first-part)
          (setq first-part (pop path-list)))
        (equal first-part maildir))))

  (defun °mu4e-message-field (msg field)
    "Like `mu4e-message-field' but return nil if msg doesn't exist."
    (when msg
      (mu4e-message-field msg field)))

  (defun °°mu4e-push-to-account-list (&rest r)
    (cl-pushnew (mu4e-context-name
                 (or
                  (mu4e-context-determine (mu4e-message-at-point t))
                  (mu4e-context-current)))
                °°mu4e-account-list))

  (defun °°mu4e-remove-from-account-list (&rest r)
    (setq °°mu4e-account-list
          (delete (mu4e-context-name (mu4e-context-current)) °°mu4e-account-list)))

  (defun °mu4e-retrieve-recipient (msg)
    (let* ((fields '(:from :to :cc))
           (recipients
            (apply #'append (mapcar (lambda (kw) (mu4e-message-field msg kw)) fields))))
      (car recipients)))
  
  (defun °mu4e-search-sender ()
    (interactive)
    (let* ((from (mu4e-message-field (mu4e-message-at-point) :from))
           (senders (string-join
                     (mapcar (lambda (s) (concat "from:" (plist-get s :email))) from)
                     " or ")))
      (mu4e-mark-handle-when-leaving)
      (mu4e--search-execute senders t))))

(provide 'init-mu4e)
